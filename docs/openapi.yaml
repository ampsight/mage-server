openapi: 3.0.1
info:
  title: MAGE (Mobile Awareness GEOINT Environment) API
  description: MAGE API
  contact:
    name: MAGE Support
    email: mage@nga.mil
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0
  version: 5.2.6
servers:
- url: http://localhost:4242
paths:
  /api/logout:
    post:
      tags:
      - Auth
      description: Invaldate the auth token for the requesting user.
      operationId: logout
      responses:
        200:
          description: logout response
          content: {}

  /api/users:
    get:
      tags: [ User ]
      description: >
        Return an array of all users.  The client must have `READ_USER` permission.
      operationId: getUsers
      parameters:
        - in: query
          name: active
          description: Return only active or inactive users.
          schema:
            type: boolean
        - in: query
          name: populate
          description: >
            Pre-populate the given relation keys in the result user documents.
            Currently, this only supports 'roleId'.
          schema: { $ref: '#/components/schemas/CommaSeparatedTokens' }
      responses:
        200:
          description: An array of user documents
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      tags: [ User ]
      description: >
        Create a new user.  Duplicate usernames are not allowed.
        If the requesting client is an admin, i.e., has the `CREATE_USER`
        permission, the user record will be active.  Otherwise, the user will
        be inactive and an admin must activate the user later.  Additionally,
        the `roleId` key is required when the requesting client is an admin,
        otherwise, the created user receives a default role.  When the request
        body contains `multipart/form-data`, MAGE will handle the `icon` and/or
        `avatar` file form parameters.
      operationId: createUser
      requestBody:
        $ref: '#/components/requestBodies/UserIn'
      responses:
        200:
          description: The created user document
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /api/users/count:
    get:
      tags: [ User ]
      description: >
        Return the number of users in the database.  The client must
        have `READ_USER` permission.
      operationId: getUserCount
      responses:
        200:
          description: A successful request
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Count' }
  /api/users/{userId}:
    parameters:
      - { $ref: '#/components/parameters/userIdInPath' }
    get:
      tags:
      - User
      description: >
        Return the user document whose `id` equals the `userId` path parameter.
        The client must have `READ_USER` permission.
      operationId: getUserById
      responses:
        200:
          description: The updated user document
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      tags: [ User ]
      description: >
        Update the user document whose `id` equals the `userId` path parameter.
        The client must have `UPDATE_USER` permission.
      operationId: updateUserById
      requestBody:
        $ref: '#/components/requestBodies/UserIn'
      responses:
        200:
          description: user update response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      tags: [ User ]
      description: >
        Delete the user document whose `id` equals the `userId` path parameter.
        The client must have `DELETE_USER` permission.
      operationId: deleteUser
      responses:
        204:
          description: user deleted
          content: {}
  /api/users/{userId}/avatar:
    parameters:
      - { $ref: '#/components/parameters/userIdInPath' }
    get:
      tags: [ User ]
      description: Returns users avatar based on user id
      operationId: getUserAvatar
      responses:
        200:
          description: user avatar response
          content: {}
  /api/users/{userId}/icon:
    parameters:
      - { $ref: '#/components/parameters/userIdInPath' }
    get:
      tags: [ User ]
      description: Returns users map icon based on user id
      operationId: getUserIcon
      responses:
        200:
          description: user icon response
          content: {}
  /api/users/{userId}/events/{eventId}/recent:
    parameters:
      - { $ref: '#/components/parameters/userIdInPath' }
      - { $ref: '#/components/parameters/eventIdInPath' }
    post:
      tags: [ User ]
      description: >
        Add the given event to top of recent list for the given user.  The list
        is capped at 5.
      operationId: addRecentEventForUser
      responses:
        200:
          description: user response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /api/users/myself:
    get:
      tags: [ User ]
      description: >
        Return the user document for the requesting user based on the
        provided authentication token.
      operationId: getMyself
      responses:
        200:
          description: The user document for the requesting user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      tags: [ User ]
      description: >
        Update the user document for the requesting user based on the
        provided authentication token.  This operation does not support
        changing the requesting user's password; use
        `PUT /api/users/myself/password` for that.
      operationId: updateMyself
      requestBody: { $ref: '#/components/requestBodies/UserIn' }
      responses:
        200:
          description: The updated user document
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /api/users/myself/password:
    put:
      tags: [ User ]
      description: Update the password for the requesting user.
      operationId: updateMyPassword
      requestBody:
        content:
          application/json:
            schema:
              properties:
                newPassword:
                  type: string
                  format: password
                newPasswordConfirm:
                  type: string
                  format: password
      responses:
        200:
          description: Successful password update; return the user document
          content:
            application/json:
              schema: { $ref: '#/components/schemas/User' }

  /api/logins:
    get:
      tags: [ Auth ]
      description: >
        Return an array of user login events.  This operation requires
        `READ_USER` permission.
      operationId: getUserLogins
      parameters:
        - name: userId
          in: query
          description: Return only logins for the given `userId`
          schema: { $ref: '#/components/schemas/User/properties/id' }
        - name: deviceId
          in: query
          description: Return only logins from the given `deviceId`
          schema: { $ref: '#/components/schemas/Device/properties/id' }
        - name: startDate
          in: query
          description: ISO 8601 start date to filter (inclusive)
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          description: ISO 8601 end date filter (exclusive)
          schema:
            type: string
            format: date-time
        - name: limit
          in: query
          description: >
            Limit the number of results to the given value.  The default value
            is `10`.
          schema:
            type: integer
        - name: firstLoginId
          in: query
          description: The ID of the first login in the range of results
          schema: { $ref: '#/components/schemas/Login/properties/id' }
        - name: lastLoginId
          in: query
          description: The ID of the last login in the range of results
          schema: { $ref: '#/components/schemas/Login/properties/id' }
      responses:
        200:
          description: >
            Success - return the array of login events according to the given
            query parameters.
          content:
            application/json:
              schema:
                type: object
                required: [ logins ]
                properties:
                  next:
                    type: string
                    format: uri
                    description: Link to the next chunk of results
                  prev:
                    type: string
                    format: uri
                    description: Link to the previous chunk of results
                  logins:
                    type: array
                    items: { $ref: '#/components/schemas/Login' }
  /api/devices:
    get:
      tags:
        - Device
      description: >
        Return an array of all the device documents in the database.  The
        requesting client must have `READ_DEVICE` permission.
      operationId: getDevices
      parameters:
        - in: query
          name: registered
          description: Return only registered or unregistered devices.
          schema: { $ref: '#/components/schemas/Device/properties/registered' }
        - in: query
          name: expand
          description: >
            Comma-separated list of relation keys to populate with related
            documents.  Currently the API only supports the `user` key.
          schema: { $ref: '#/components/schemas/CommaSeparatedTokens' }
      responses:
        200:
          description: Success - an array of device documents
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Device'
    post:
      tags:
        - Device
      description: >
        Save a new device document in the database.  The request client must
        have `CREATE_DEVICE` permission.
      operationId: createDevice
      requestBody:
        $ref: '#/components/requestBodies/DeviceIn'
      responses:
        200:
          description: new device response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
  /api/devices/count:
    get:
      tags:
        - Device
      operationId: getDeviceCount
      description: Return the number of devices in the database.
      responses:
        200:
          description: Success - return the device count
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Count'
  /api/devices/{deviceId}:
    parameters:
      - $ref: '#/components/parameters/deviceIdInPath'
    get:
      tags:
        - Device
      description: >
        Return the device document whose ID matches the path parameter for the
        device ID.  The requesting client must have READ_DEVICE permission.
      operationId: getDeviceById
      responses:
        200:
          description: device response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
    put:
      tags:
        - Device
      description: >
        Update a device document whose ID matches the path parameter for the
        device ID.  The requesting client must have `UPDATE_DEVICE` permission.
      operationId: updateDeviceById
      requestBody:
        $ref: '#/components/requestBodies/DeviceIn'
      responses:
        200:
          description: device update response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
    delete:
      tags:
        - Device
      description: >
        Delete a device document whose ID matches the path parameter for the
        device ID.  The requesting client must have `DELETE_DEVICE` permission.
      operationId: deleteDeviceByIds
      responses:
        204:
          description: user deleted
          content: {}
  /api/teams:
    get:
      tags:
        - Team
      description: >
        Return all the teams.  The requesting client must have `READ_TEAM`
        permission.
      operationId: getTeams
      responses:
        200:
          description: Success - an array of team documents
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Team'
    post:
      tags:
        - Team
      description: >
        Save a new team document to the database.  The requesting client must
        have `CREATE_TEAM` permission.
      operationId: createTeam
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/TeamCreate' }
          application/x-www-form-urlencoded:
            schema: { $ref: '#/components/schemas/TeamCreate' }
      responses:
        200:
          description: Success - the created team document
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
  /api/teams/{teamId}:
    parameters:
      - $ref: '#/components/parameters/teamIdInPath'
    get:
      tags:
        - Team
      description: >
        Return the team document whose ID matches the team ID path parameter.
        The requesting client must have `READ_TEAM` permission.
      operationId: getTeamById
      responses:
        200:
          description: Success - a team document
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
    put:
      tags:
        - Team
      description: >
        Update the team document whose ID matches the team ID in the path.
        The requesting user must have `UPDATE_TEAM` permission.
      operationId: updateTeamById
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/TeamUpdate' }
          application/x-www-form-urlencoded:
            schema: { $ref: '#/components/schemas/TeamUpdate' }
      responses:
        200:
          description: team update response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
    delete:
      tags:
      - Team
      description: >
        Delete the team document whose ID matches the team ID in the path.  The
        request user must have `DELETE_TEAM` permission.
      operationId: deleteTeam
      parameters:
      - name: id
        in: path
        description: id of team to delete
        required: true
        schema:
          type: number
      responses:
        204:
          description: team deleted
          content: {}
  /api/teams/{id}/user:
    post:
      tags:
      - Team
      description: Add new user to this team
      operationId: addUserToTeam
      parameters:
      - name: id
        in: path
        description: id of team to fetch
        required: true
        schema:
          type: number
      requestBody:
        description: team body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        200:
          description: team response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
  /api/teams/{id}/user/{userId}:
    delete:
      tags:
      - Team
      description: removes a user from the team
      operationId: removeUserFromTeam
      parameters:
      - name: id
        in: path
        description: id of team
        required: true
        schema:
          type: number
      - name: userId
        in: path
        description: id of user to delete from team
        required: true
        schema:
          type: number
      responses:
        204:
          description: team deleted
          content: {}
  /api/events:
    get:
      tags:
      - Event
      description: get all events
      operationId: getEvents
      parameters:
      - name: userId
        in: query
        schema:
          type: string
      - name: state
        in: query
        schema:
          type: string
      responses:
        200:
          description: event response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
    post:
      tags:
      - Event
      description: add new event
      operationId: addEvent
      requestBody:
        description: new event body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventCreate'
        required: true
      responses:
        200:
          description: new event response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
  /api/events/{id}:
    get:
      tags:
      - Event
      description: Returns a single event based on id
      operationId: getEventById
      parameters:
      - name: id
        in: path
        description: id of event to fetch
        required: true
        schema:
          type: number
      responses:
        200:
          description: event response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
    put:
      tags:
      - Event
      description: update a single event based on id
      operationId: updateEventById
      parameters:
      - name: id
        in: path
        description: id of event to update
        required: true
        schema:
          type: number
      requestBody:
        description: event update body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventCreate'
        required: true
      responses:
        200:
          description: event update response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
    delete:
      tags:
      - Event
      description: deletes a single event based on id
      operationId: deleteEvent
      parameters:
      - name: id
        in: path
        description: id of event to delete
        required: true
        schema:
          type: number
      responses:
        204:
          description: event deleted
          content: {}
  /api/events/{id}/teams:
    get:
      tags:
      - Event
      description: get teams for an event
      operationId: getTeamsForEvent
      parameters:
      - name: id
        in: path
        description: id of event to update
        required: true
        schema:
          type: number
      - name: populate
        in: query
        description: populate parameter
        schema:
          type: string
      responses:
        200:
          description: teams response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
    post:
      tags:
      - Event
      description: add a team to an event
      operationId: addTeamToEvent
      parameters:
      - name: id
        in: path
        description: id of event to update
        required: true
        schema:
          type: number
      requestBody:
        description: team body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Team'
        required: true
      responses:
        200:
          description: event update response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
  /api/events/{id}/users:
    get:
      tags:
      - Event
      description: get users for an event
      operationId: getUsersForEvent
      parameters:
      - name: id
        in: path
        description: id of event to update
        required: true
        schema:
          type: number
      responses:
        200:
          description: users response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /api/events/{id}/teams/{teamId}:
    delete:
      tags:
      - Event
      description: removes a team from the event
      operationId: removeTeamFromEvent
      parameters:
      - name: id
        in: path
        description: id of event
        required: true
        schema:
          type: number
      - name: teamId
        in: path
        description: id of the team to remove from event
        required: true
        schema:
          type: number
      responses:
        204:
          description: event deleted
          content: {}
  /api/events/{eventId}/layers:
    get:
      tags:
      - Layer
      description: get layers for the specified event
      operationId: getLayersForEvent
      parameters:
      - name: eventId
        in: path
        description: id of the event to get layers for
        required: true
        schema:
          type: number
      - name: type
        in: query
        description: layer type filter, i.e. Imagery or Feature
        schema:
          type: string
      responses:
        200:
          description: layer responses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Layer'
    post:
      tags:
      - Event
      description: add a layer to an event
      operationId: addLayerToEvent
      parameters:
      - name: eventId
        in: path
        description: id of event to update
        required: true
        schema:
          type: number
      requestBody:
        description: layer body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Layer'
        required: true
      responses:
        200:
          description: event update response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
  /api/events/{id}/layers/{layerId}:
    delete:
      tags:
      - Event
      description: removes a layer from the event
      operationId: removeLayerFromEvent
      parameters:
      - name: id
        in: path
        description: id of event
        required: true
        schema:
          type: number
      - name: layerId
        in: path
        description: id of the layer to remove from event
        required: true
        schema:
          type: number
      responses:
        204:
          description: event deleted
          content: {}
  /api/events/{id}/form.zip:
    get:
      tags:
      - Event
      description: Export a zip archive of the form .  Includes metadata and icon
        symbology
      operationId: getFormArchive
      parameters:
      - name: id
        in: path
        description: id of event to fetch
        required: true
        schema:
          type: number
      responses:
        200:
          description: form archive response
          content: {}
  /api/events/{eventId}/form/icons.zip:
    get:
      tags:
      - Event
      description: get all icons
      operationId: getIcons
      parameters:
      - name: eventId
        in: path
        description: eventId in which icon resides
        required: true
        schema:
          type: string
      responses:
        200:
          description: icon response
          content: {}
  /api/events/{eventId}/form/icons:
    get:
      tags:
      - Event
      description: Returns the default icon for this form
      operationId: getDefaultIcon
      parameters:
      - name: eventId
        in: path
        description: eventId in which icon resides
        required: true
        schema:
          type: string
      responses:
        200:
          description: form response
          content: {}
    post:
      tags:
      - Event
      description: add new default icon
      operationId: addDefaultIcon
      parameters:
      - name: eventId
        in: path
        description: eventId in which icon resides
        required: true
        schema:
          type: string
      responses:
        200:
          description: new icon response
          content: {}
    delete:
      tags:
      - Event
      description: deletes the default icon
      operationId: deleteDefaultIcon
      parameters:
      - name: eventId
        in: path
        description: eventId in which icon resides
        required: true
        schema:
          type: string
      responses:
        204:
          description: icon deleted
          content: {}
  /api/events/{eventId}/form/icons/{type}:
    get:
      tags:
      - Event
      description: Returns a icon based on type
      operationId: getTypeIcon
      parameters:
      - name: eventId
        in: path
        description: eventId in which icon resides
        required: true
        schema:
          type: string
      - name: type
        in: path
        description: icon type
        required: true
        schema:
          type: string
      responses:
        200:
          description: form response
          content: {}
    post:
      tags:
      - Event
      description: add new type icon
      operationId: addTypeIcon
      parameters:
      - name: eventId
        in: path
        description: eventId in which icon resides
        required: true
        schema:
          type: string
      - name: type
        in: path
        description: icon type
        required: true
        schema:
          type: string
      responses:
        200:
          description: new icon response
          content: {}
    delete:
      tags:
      - Event
      description: deletes a type icon
      operationId: deleteTypeIcon
      parameters:
      - name: eventId
        in: path
        description: eventId in which icon resides
        required: true
        schema:
          type: string
      - name: type
        in: path
        description: icon type
        required: true
        schema:
          type: string
      responses:
        204:
          description: icon deleted
          content: {}
  /api/events/{eventId}/form/icons/{type}/{variant}:
    get:
      tags:
      - Event
      description: Returns a single form based on id
      operationId: getIcon
      parameters:
      - name: eventId
        in: path
        description: eventId in which icon resides
        required: true
        schema:
          type: string
      - name: type
        in: path
        description: icon type
        required: true
        schema:
          type: string
      - name: variant
        in: path
        description: variant type
        required: true
        schema:
          type: string
      responses:
        200:
          description: form response
          content: {}
    post:
      tags:
      - Event
      description: add new icon
      operationId: addIcon
      parameters:
      - name: eventId
        in: path
        description: eventId in which icon resides
        required: true
        schema:
          type: string
      - name: type
        in: path
        description: icon type
        required: true
        schema:
          type: string
      - name: variant
        in: path
        description: variant type
        required: true
        schema:
          type: string
      responses:
        200:
          description: new icon response
          content: {}
    delete:
      tags:
      - Event
      description: deletes a single icon
      operationId: deleteIcon
      parameters:
      - name: eventId
        in: path
        description: eventId in which icon resides
        required: true
        schema:
          type: string
      - name: type
        in: path
        description: icon type
        required: true
        schema:
          type: string
      - name: variant
        in: path
        description: variant type
        required: true
        schema:
          type: string
      responses:
        204:
          description: icon deleted
          content: {}
  /api/events/{eventId}/observations:
    get:
      tags:
      - Observation
      description: get all observations for event
      operationId: getObservations
      parameters:
      - name: eventId
        in: path
        description: eventId in which to retrieve observations
        required: true
        schema:
          type: number
      - name: fields
        in: query
        description: feature fields to project in response (JSON)
        schema:
          type: string
      - name: startDate
        in: query
        schema:
          type: string
          format: dateTime
      - name: endDate
        in: query
        schema:
          type: string
          format: dateTime
      - name: bbox
        in: query
        description: bounding box array [minx,miny,maxx,maxy]
        style: form
        explode: false
        schema:
          type: array
          items:
            type: number
      - name: states
        in: query
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
      responses:
        200:
          description: observation response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Feature'
    post:
      tags:
      - Observation
      description: add new observation
      operationId: addObservationDeprecated
      parameters:
      - name: eventId
        in: path
        description: eventId for which to create observation
        required: true
        schema:
          type: number
      requestBody:
        description: observation request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Feature'
        required: true
      responses:
        200:
          description: observation response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feature'
      deprecated: true
  /api/events/{eventId}/observations/id:
    post:
      tags:
      - Observation
      description: Generate a new observation resource location
      operationId: createObservationId
      parameters:
      - name: eventId
        in: path
        description: eventId for which to create observation
        required: true
        schema:
          type: number
      responses:
        200:
          description: new observation location
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
  /api/events/{eventId}/observations/{observationId}:
    get:
      tags:
      - Observation
      description: get observation for eventId
      operationId: getObservation
      parameters:
      - name: eventId
        in: path
        description: eventId in which to retrieve observation
        required: true
        schema:
          type: number
      - name: observationId
        in: path
        description: observationId for observation
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: feature fields to project in response (JSON)
        schema:
          type: string
      - name: startDate
        in: query
        schema:
          type: string
          format: dateTime
      - name: endDate
        in: query
        schema:
          type: string
          format: dateTime
      - name: bbox
        in: query
        description: bounding box array [minx,miny,maxx,maxy]
        style: form
        explode: false
        schema:
          type: array
          items:
            type: number
      - name: states
        in: query
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
      responses:
        200:
          description: observation response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feature'
    put:
      tags:
      - Observation
      description: update observation for eventId
      operationId: updateObservationDeprecated
      parameters:
      - name: eventId
        in: path
        description: eventId in which to update observation
        required: true
        schema:
          type: number
      - name: observationId
        in: path
        description: observationId for observation
        required: true
        schema:
          type: string
      requestBody:
        description: observation request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Feature'
        required: true
      responses:
        200:
          description: observation response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feature'
      deprecated: true
  /api/events/{eventId}/observations/id/{observationId}/:
    put:
      tags:
      - Observation
      description: update observation for eventId
      operationId: updateObservation
      parameters:
      - name: eventId
        in: path
        description: eventId in which to update observation
        required: true
        schema:
          type: number
      - name: observationId
        in: path
        description: observationId for observation
        required: true
        schema:
          type: string
      requestBody:
        description: observation request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Feature'
        required: true
      responses:
        200:
          description: observation response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feature'
  /api/events/{eventId}/observations/{observationId}/favorite:
    put:
      tags:
      - Observation
      description: favorite observation for provided event
      operationId: addFavoriteObservation
      parameters:
      - name: eventId
        in: path
        description: eventId in which to observation lives
        required: true
        schema:
          type: number
      - name: observationId
        in: path
        description: observationId for observation to favorite
        required: true
        schema:
          type: string
      responses:
        200:
          description: observation response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureState'
    delete:
      tags:
      - Observation
      description: remove favorite for observation for provided event
      operationId: removeFavoriteObservation
      parameters:
      - name: eventId
        in: path
        description: eventId in which to observation lives
        required: true
        schema:
          type: number
      - name: observationId
        in: path
        description: observationId for observation to remove favorite
        required: true
        schema:
          type: string
      responses:
        200:
          description: observation response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureState'
  /api/events/{eventId}/observations/{observationId}/important:
    put:
      tags:
      - Observation
      description: add/update important on provided observation for provided event
      operationId: addObservationImportant
      parameters:
      - name: eventId
        in: path
        description: eventId in which to add/update observation important
        required: true
        schema:
          type: number
      - name: observationId
        in: path
        description: observationId for observation
        required: true
        schema:
          type: string
      requestBody:
        description: important request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ObservationImportantCreate'
        required: true
      responses:
        200:
          description: observation response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureState'
    delete:
      tags:
      - Observation
      description: remove important on provided observation for provided event
      operationId: removeObservationImportant
      parameters:
      - name: eventId
        in: path
        description: eventId in which to remove observation important
        required: true
        schema:
          type: number
      - name: observationId
        in: path
        description: observationId for observation
        required: true
        schema:
          type: string
      responses:
        200:
          description: observation response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureState'
  /api/events/{eventId}/observations/{observationId}/states:
    post:
      tags:
      - Observation
      description: update state on provided observation for provided event
      operationId: addObservationState
      parameters:
      - name: eventId
        in: path
        description: eventId in which to update observation state
        required: true
        schema:
          type: number
      - name: observationId
        in: path
        description: observationId for observation
        required: true
        schema:
          type: string
      requestBody:
        description: state request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeatureStateCreate'
        required: true
      responses:
        200:
          description: observation response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureState'
  /api/events/{eventId}/observations/{observationId}/attachments:
    get:
      tags:
      - Observation
      description: get attachments for observation in event
      operationId: getAttachments
      parameters:
      - name: eventId
        in: path
        description: eventId in which to retrieve observation attachments
        required: true
        schema:
          type: number
      - name: observationId
        in: path
        description: observationId for observation
        required: true
        schema:
          type: string
      responses:
        200:
          description: attachment response
          content:
            application/octet-stream:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Attachment'
    post:
      tags:
      - Observation
      description: add new attachment
      operationId: addAttachment
      parameters:
      - name: eventId
        in: path
        description: eventId in which to create attachment
        required: true
        schema:
          type: number
      - name: observationId
        in: path
        description: observationId in which to create attachment
        required: true
        schema:
          type: string
      requestBody:
        content:
          mulitpart/form-data:
            schema:
              required:
              - attachment
              properties:
                attachment:
                  type: string
                  description: attachment
                  format: binary
        required: true
      responses:
        200:
          description: attachment response
          content: {}
  /api/events/{eventId}/observations/{observationId}/attachments/{attachmentId}:
    get:
      tags:
      - Observation
      description: get attachment for observation in event
      operationId: getAttachment
      parameters:
      - name: eventId
        in: path
        description: eventId in which to retrieve observation
        required: true
        schema:
          type: number
      - name: observationId
        in: path
        description: observationId for observation
        required: true
        schema:
          type: string
      - name: attachmentId
        in: path
        description: id of attachment to fetch
        required: true
        schema:
          type: string
      responses:
        200:
          description: attachment response
          content: {}
    put:
      tags:
      - Observation
      description: update attachment for observation in event
      operationId: updateAttachment
      parameters:
      - name: eventId
        in: path
        description: eventId in which to update observation attachment
        required: true
        schema:
          type: number
      - name: observationId
        in: path
        description: observationId for observation
        required: true
        schema:
          type: string
      - name: attachmentId
        in: path
        description: id of attachment to update
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              required:
              - attachment
              properties:
                attachment:
                  type: string
                  description: attachment
                  format: binary
        required: true
      responses:
        200:
          description: attachment response
          content: {}
    delete:
      tags:
      - Observation
      description: delete attachment for observation in event
      parameters:
      - name: eventId
        in: path
        description: eventId in which to retrieve features
        required: true
        schema:
          type: number
      - name: observationId
        in: path
        description: observationId for feature
        required: true
        schema:
          type: string
      - name: attachmentId
        in: path
        description: id of attachment to update
        required: true
        schema:
          type: string
      responses:
        200:
          description: attachment delete
          content: {}
  /api/layers:
    get:
      tags:
      - Layer
      description: get all layers
      operationId: getLayers
      parameters:
      - name: type
        in: query
        description: layer type filter, i.e. Imagery or Feature
        schema:
          type: string
      responses:
        200:
          description: layer response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Layer'
    post:
      tags:
      - Layer
      description: add new layer
      operationId: addLayer
      requestBody:
        description: new layer body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LayerCreate'
        required: true
      responses:
        200:
          description: new layer response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Layer'
  /api/layers/{id}:
    get:
      tags:
      - Layer
      description: Returns a single layer based on id
      operationId: getLayerById
      parameters:
      - name: id
        in: path
        description: id of layer to fetch
        required: true
        schema:
          type: string
      responses:
        200:
          description: layer response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Layer'
    put:
      tags:
      - Layer
      description: update a single layer based on id
      operationId: updateLayerById
      parameters:
      - name: id
        in: path
        description: id of layer to update
        required: true
        schema:
          type: string
      requestBody:
        description: layer update body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LayerCreate'
        required: true
      responses:
        200:
          description: layer update response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Layer'
    delete:
      tags:
      - Layer
      description: deletes a single layer based on id
      operationId: deleteLayer
      parameters:
      - name: id
        in: path
        description: id of layer to delete
        required: true
        schema:
          type: string
      responses:
        204:
          description: layer deleted
          content: {}
  /api/events/{eventId}/layers/{layerId}/features:
    get:
      tags:
      - Layer
      description: get features for specified layer in event
      operationId: getFeaturesForLayer
      parameters:
      - name: eventId
        in: path
        description: id of the event to get features for
        required: true
        schema:
          type: number
      - name: layerId
        in: path
        description: id of the layer to get features for
        required: true
        schema:
          type: number
      responses:
        200:
          description: feature responses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Feature'
  /api/events/{eventId}/locations:
    get:
      tags:
      - Location
      description: get all locations
      operationId: getLocations
      parameters:
      - name: eventId
        in: path
        description: id of event to get locations for
        required: true
        schema:
          type: number
      - name: startDate
        in: query
        schema:
          type: string
          format: dateTime
      - name: endDate
        in: query
        schema:
          type: string
          format: dateTime
      - name: lastLocationId
        in: query
        description: locationId of last item in previous page (paging)
        schema:
          type: string
      - name: limit
        in: query
        description: limit locations (paging)
        schema:
          type: number
      responses:
        200:
          description: location response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Feature'
    post:
      tags:
      - Location
      description: add new location for current user in the specified event
      operationId: addLocation
      parameters:
      - name: eventId
        in: path
        description: id of event to post location to
        required: true
        schema:
          type: number
      requestBody:
        description: new location body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Feature'
        required: true
      responses:
        200:
          description: location response
          content: {}
  /api/events/{eventId}/locations/users:
    get:
      tags:
      - Location
      description: get all locations grouped by user
      operationId: getLocationsByUser
      parameters:
      - name: eventId
        in: path
        description: id of event to update location to
        required: true
        schema:
          type: number
      - name: startDate
        in: query
        schema:
          type: string
          format: dateTime
      - name: endDate
        in: query
        schema:
          type: string
          format: dateTime
      - name: lastLocationId
        in: query
        description: locationId of last item in previous page (paging)
        schema:
          type: string
      - name: limit
        in: query
        description: limit locations (paging)
        schema:
          type: number
      responses:
        200:
          description: location response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Feature'
  /api/roles:
    get:
      tags:
      - Role
      description: get all roles
      operationId: getRoles
      responses:
        200:
          description: role response
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Role' }
  /api/roles/{id}:
    get:
      tags:
      - Role
      description: get role by id
      operationId: getRoleById
      parameters:
      - name: id
        in: path
        description: id of role to fetch
        required: true
        schema:
          type: string
      responses:
        200:
          description: role response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
  /api/settings:
    get:
      tags:
      - Settings
      description: get settings
      operationId: getSettings
      responses:
        200:
          description: export response
          content: {}
  /api/settings/{type}:
    get:
      tags:
      - Settings
      description: get settings by type
      operationId: getSettingByType
      parameters:
      - name: type
        in: path
        description: type name to update
        required: true
        schema:
          type: string
          enum:
          - banner
          - disclaimer
      responses:
        200:
          description: settings response
          content: {}
    put:
      tags:
      - Settings
      description: update settings by type
      operationId: updateSettingByType
      parameters:
      - name: type
        in: path
        description: type name to update
        required: true
        schema:
          type: string
          enum:
          - banner
          - disclaimer
      responses:
        200:
          description: settings response
          content: {}
  /api/{exportType}:
    get:
      tags:
      - Export
      description: export mage data (GeoJSON, KML or Shapefiles)
      operationId: export
      parameters:
      - name: exportType
        in: path
        required: true
        schema:
          type: string
          enum:
          - geojson
          - kml
          - shapefile
      - name: startDate
        in: query
        schema:
          type: string
          format: dateTime
      - name: endDate
        in: query
        schema:
          type: string
          format: dateTime
      - name: layerIds
        in: query
        description: ids of feature layers to export
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
      - name: fft
        in: query
        description: export locations
        schema:
          type: boolean
      responses:
        200:
          description: export response
          content: {}
components:
  securitySchemes:
    authToken:
      type: http
      description: >
        MAGE generates an authentication token when a client authenticates
        initially.  The client can use the token for subsequent requests until
        it expires.
      scheme: bearer
  schemas:
    CommaSeparatedTokens:
      type: string
      pattern: '\w+(,\w+)*'
    Count:
      type: object
      required: [ count ]
      properties:
        count:
          type: integer
    User:
      description: >
        The `User` schema defines the structure of persisted user documents as
        they exist in the database and as the server returns them in various
        responses.
      required:
        - id
        - username
        - displayName
        - active
        - enabled
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        displayName:
          type: string
        email:
          type: string
          format: email
        createdAt:
          type: string
          format: date-time
        lastUpdated:
          type: string
          format: date-time
        active:
          type: boolean
        enabled:
          type: boolean
        avatarUrl:
          type: string
        iconUrl:
          type: string
        authentication:
          $ref: '#/components/schemas/AuthStatus'
        role:
          $ref: '#/components/schemas/Role'
        roleId:
          $ref: '#/components/schemas/Role/properties/id'
        icon:
          $ref: '#/components/schemas/UserIcon'
        phones:
          type: array
          items:
            $ref: '#/components/schemas/Phone'
        recentEventIds:
          type: array
          items:
            $ref: '#/components/schemas/Event/properties/id'
      oneOf:
        - { required: [ role ], not: { required: [ roleId ] } }
        - { required: [ roleId ], not: { required: [ role ] } }
    UserIn:
      type: object
      properties:
        username:
          type: string
        displayName:
          type: string
        email:
          type: string
        phone:
          type: string
        active:
          type: boolean
        enabled:
          type: boolean
        roleId:
          type: string
        password:
          type: string
        passwordconfirm:
          type: string
        avatar:
          type: string
          format: binary
        icon:
          type: string
          format: binary
    UserRef:
      type: object
      properties:
        id: { $ref: '#/components/schemas/User/properties/id' }
      additionalProperties: true
    AuthStatus:
      required:
       - type
      properties:
        type:
          type: string
        security:
          type: object
          properties:
            locked:
              type: boolean
            lockedUntil:
              type: string
              format: date-time
            invalidLoginAttempts:
              type: number
            numberOfTimesLocked:
              type: number
    Device:
      required:
        - id
        - uid
        - name
        - description
      type: object
      properties:
        id:
          type: string
        uid:
          type: string
          description: >
            The device UID is an identifier string assigned at the application
            level.  This is usually a UUID, but can be any string the creator
            of the device chooses.
        name:
          type: string
        description:
          type: string
        registered:
          type: boolean
        userAgent:
          type: string
        appVersion:
          type: string
        userId:
          $ref: '#/components/schemas/User/properties/id'
        user:
          $ref: '#/components/schemas/User'
      oneOf:
        - { required: [ userId ], not: { required: [ user ] } }
        - { required: [ user ], not: { required: [ userId ] } }
    DeviceIn:
      type: object
      required: [ uid ]
      properties:
        uid:
          type: string
        name:
          type: string
        description:
          type: string
        userId:
          $ref: '#/components/schemas/User/properties/id'
    Choice:
      type: object
      properties:
        id:
          type: number
        title:
          type: string
        value:
          type: string
    Form:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        variantField:
          type: string
        fields:
          type: array
          items:
            $ref: '#/components/schemas/Field'
    ObservationImportantCreate:
      type: object
      properties:
        description:
          type: string
    EventCreate:
      required:
      - name
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        form:
          $ref: '#/components/schemas/FormCreate'
    Attachment:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        contentType:
          type: string
        url:
          type: string
        height:
          type: number
        width:
          type: number
        oriented:
          type: boolean
        thumbnails:
          type: array
          items:
            $ref: '#/components/schemas/Thumbnail'
    LocalCredentials:
      required:
      - password
      - username
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    Thumbnail:
      type: object
      properties:
        name:
          type: string
        contentType:
          type: string
        height:
          type: number
        width:
          type: number
        size:
          type: number
        minDimension:
          type: number
    Feature:
      type: object
      properties:
        id:
          type: number
        type:
          type: string
        geometry:
          type: object
          properties: {}
        properties:
          type: object
          properties: {}
    Field:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        title:
          type: string
        type:
          type: string
        value:
          type: string
        required:
          type: boolean
        choices:
          type: array
          items:
            $ref: '#/components/schemas/Choice'
    Phone:
      type: object
      properties:
        type:
          type: string
        number:
          type: string
    FormCreate:
      type: object
      properties:
        name:
          type: string
        variantField:
          type: string
        fields:
          type: array
          items:
            $ref: '#/components/schemas/Field'
    Team:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        description:
          type: string
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
    TeamCreate:
      type: object
      allOf:
        - { $ref: '#/components/schemas/Team' }
        - required:
          - name
          - description
    TeamUpdate:
      type: object
      allOf:
        - { $ref: '#/components/schemas/Team' }
        - required:
          - id
        - type: object
          properties:
            userIds:
              type: array
              items: { $ref: '#/components/schemas/User/properties/id' }
    FeatureStateCreate:
      type: object
      properties:
        name:
          type: string
        url:
          type: string
        userId:
          type: string
    LoginResponse:
      type: object
      properties:
        token:
          type: string
        expirationDate:
          type: string
        user:
          $ref: '#/components/schemas/User'
        role:
          $ref: '#/components/schemas/Role'
    Login:
      required:
        - id
        - timestamp
      type: object
      properties:
        id:
          type: string
        timestamp:
          type: string
        device:
          $ref: '#/components/schemas/Device'
        deviceId:
          $ref: '#/components/schemas/Device/properties/id'
        user:
          $ref: '#/components/schemas/User'
        userId:
          $ref: '#/components/schemas/User/properties/id'
      allOf:
        - oneOf:
          - { required: [ deviceId ], not: { required: [ device ] } }
          - { required: [ device ], not: { required: [ deviceId ] } }
        - oneOf:
          - { required: [ userId ], not: { required: [ user ] } }
          - { required: [ user ], not: { required: [ userId ] } }
    Layer:
      required:
      - id
      - name
      - type
      - url
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        type:
          type: string
        url:
          type: string
        base:
          type: boolean
        format:
          type: string
    FeatureState:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        url:
          type: string
        userId:
          type: string
    Role:
      required:
      - description
      - id
      - name
      - permissions
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        permissions:
          type: array
          items:
            type: string
    LayerCreate:
      required:
      - name
      - type
      - url
      type: object
      properties:
        name:
          type: string
        type:
          type: string
        url:
          type: string
        base:
          type: boolean
        format:
          type: string
    UserIcon:
      type: object
      properties:
        color:
          type: string
        contentType:
          type: string
        size:
          type: number
        text:
          type: string
        type:
          type: string
    Event:
      required:
      - id
      - name
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        forms:
          type: array
          items: { $ref: '#/components/schemas/Form' }
        teams:
          type: array
          items:
            $ref: '#/components/schemas/Team'

  parameters:
    userIdInPath:
      in: path
      name: userId
      description: The ID of the target user document
      required: true
      example: 5d0b2bfeeec24262f1a5fdf3
      schema: { $ref: '#/components/schemas/User/properties/id' }
    eventIdInPath:
      in: path
      name: eventId
      description: The ID of the target event document
      required: true
      example: 5d0b2bfeeec24262f1a5fdf3
      schema: { $ref: '#/components/schemas/Event/properties/id' }
    deviceIdInPath:
      in: path
      name: deviceId
      description: The ID of the target device document
      required: true
      schema: { $ref: '#/components/schemas/Device/properties/id' }
    teamIdInPath:
      in: path
      name: teamId
      description: The ID of the target team document
      required: true
      schema: { $ref: '#/components/schemas/Team/properties/id' }

  requestBodies:
    UserIn:
      description: >
        A `UserIn` request body is the client input document for operations that
        modify a user in the database, e.g., `POST /api/users`.  The server
        does not currently support the `avatar` and `icon` when the client
        sends the `UserIn` body as `application/json`.
      required: true
      content:
        application/json:
          schema: { $ref: '#/components/schemas/UserIn' }
        mulitpart/form-data:
          schema: { $ref: '#/components/schemas/UserIn' }
    DeviceIn:
      description: >
        A `DeviceIn` request body specifies the keys and values to save to a
        `Device` document in the database.
      required: true
      content:
        application/json:
          schema: { $ref: '#/components/schemas/DeviceIn' }
        application/x-www-form-urlencoded:
          schema: { $ref: '#/components/schemas/DeviceIn' }


